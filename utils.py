"""
Utilitaires pour l'assistant d'analyse radiologique
"""

import base64
import io
import os
from typing import Any, Dict, List

import numpy as np
from PIL import Image, ImageEnhance, ImageFilter


class ImageProcessor:
    """Classe pour le pr√©traitement d'images radiologiques"""
    
    @staticmethod
    def enhance_contrast(image: Image.Image, factor: float = 1.5) -> Image.Image:
        """
        Am√©liore le contraste d'une image radiologique
        
        Args:
            image: Image PIL √† traiter
            factor: Facteur d'am√©lioration du contraste (1.0 = inchang√©)
            
        Returns:
            Image avec contraste am√©lior√©
        """
        enhancer = ImageEnhance.Contrast(image)
        return enhancer.enhance(factor)
    
    @staticmethod
    def adjust_brightness(image: Image.Image, factor: float = 1.2) -> Image.Image:
        """
        Ajuste la luminosit√© d'une image
        
        Args:
            image: Image PIL √† traiter
            factor: Facteur d'ajustement de la luminosit√©
            
        Returns:
            Image avec luminosit√© ajust√©e
        """
        enhancer = ImageEnhance.Brightness(image)
        return enhancer.enhance(factor)
    
    @staticmethod
    def sharpen_image(image: Image.Image, factor: float = 1.5) -> Image.Image:
        """
        Applique un filtre de nettet√© √† l'image
        
        Args:
            image: Image PIL √† traiter
            factor: Facteur de nettet√©
            
        Returns:
            Image plus nette
        """
        enhancer = ImageEnhance.Sharpness(image)
        return enhancer.enhance(factor)
    
    @staticmethod
    def preprocess_radiology_image(image: Image.Image) -> Image.Image:
        """
        Pipeline complet de pr√©traitement pour images radiologiques
        
        Args:
            image: Image radiologique brute
            
        Returns:
            Image pr√©trait√©e et optimis√©e
        """
        # Conversion en RGB si n√©cessaire
        if image.mode != 'RGB':
            image = image.convert('RGB')
        
        # Am√©lioration du contraste
        image = ImageProcessor.enhance_contrast(image, 1.3)
        
        # L√©g√®re am√©lioration de la nettet√©
        image = ImageProcessor.sharpen_image(image, 1.2)
        
        # Ajustement de la luminosit√© si n√©cessaire
        image = ImageProcessor.adjust_brightness(image, 1.1)
        
        return image


class ReportFormatter:
    """Classe pour formater les rapports m√©dicaux"""
    
    @staticmethod
    def format_medical_report(report_text: str) -> str:
        """
        Formate un rapport m√©dical avec des am√©liorations typographiques
        
        Args:
            report_text: Texte brut du rapport
            
        Returns:
            Rapport format√© avec markdown
        """
        # Remplacer les sections en gras
        sections = [
            "EN-T√äTE", "TYPE D'EXAMEN", "DESCRIPTION ANALYTIQUE", 
            "SYNTH√àSE ET DIAGNOSTIC", "IMPRESSION", "CONCLUSION"
        ]
        
        formatted_text = report_text
        
        for section in sections:
            formatted_text = formatted_text.replace(
                f"**{section}**", 
                f"\n## üìã {section}\n"
            )
        
        # Am√©liorer la lisibilit√© des listes
        lines = formatted_text.split('\n')
        formatted_lines = []
        
        for line in lines:
            line = line.strip()
            if line.startswith('‚Ä¢'):
                formatted_lines.append(f"  {line}")
            elif line.startswith('*'):
                formatted_lines.append(f"**{line[1:].strip()}**")
            else:
                formatted_lines.append(line)
        
        return '\n'.join(formatted_lines)
    
    @staticmethod
    def add_disclaimer(report: str) -> str:
        """
        Ajoute un avertissement m√©dical au rapport
        
        Args:
            report: Rapport m√©dical
            
        Returns:
            Rapport avec avertissement
        """
        disclaimer = """
---
‚ö†Ô∏è **AVERTISSEMENT M√âDICAL**

Ce rapport a √©t√© g√©n√©r√© par une intelligence artificielle √† des fins d'assistance et d'√©ducation uniquement. 
Il ne remplace en aucun cas l'expertise d'un radiologue qualifi√© ou un diagnostic m√©dical professionnel.

**Veuillez consulter un professionnel de sant√© pour toute d√©cision m√©dicale.**
---
"""
        return report + disclaimer


class ValidationUtils:
    """Utilitaires de validation pour l'application"""
    
    @staticmethod
    def validate_clinical_info(clinical_info: str) -> tuple[bool, str]:
        """
        Valide les renseignements cliniques fournis
        
        Args:
            clinical_info: Texte des renseignements cliniques
            
        Returns:
            Tuple (est_valide, message)
        """
        if not clinical_info or not clinical_info.strip():
            return False, "Les renseignements cliniques sont obligatoires"
        
        if len(clinical_info.strip()) < 10:
            return False, "Les renseignements cliniques sont trop courts (minimum 10 caract√®res)"
        
        if len(clinical_info) > 2000:
            return False, "Les renseignements cliniques sont trop longs (maximum 2000 caract√®res)"
        
        return True, "Renseignements cliniques valides"
    
    @staticmethod
    def validate_patient_info(name: str, birth_date: str) -> tuple[bool, str]:
        """
        Valide les informations patient (optionnelles)
        
        Args:
            name: Nom du patient
            birth_date: Date de naissance
            
        Returns:
            Tuple (est_valide, message)
        """
        # Validation du nom (si fourni)
        if name and len(name.strip()) < 2:
            return False, "Le nom du patient doit contenir au moins 2 caract√®res"
        
        # Validation de la date de naissance (si fournie)
        if birth_date:
            # Format attendu : JJ/MM/AAAA
            import re
            date_pattern = r'^\d{2}/\d{2}/\d{4}$'
            if not re.match(date_pattern, birth_date):
                return False, "Format de date invalide. Utilisez JJ/MM/AAAA"
        
        return True, "Informations patient valides"


def create_example_clinical_cases() -> List[Dict[str, Any]]:
    """
    Cr√©e une liste de cas cliniques d'exemple pour la d√©monstration
    
    Returns:
        Liste de dictionnaires contenant les cas d'exemple
    """
    examples = [
        {
            "title": "Radiographie Thoracique - Toux Persistante",
            "clinical_info": "Patient de 45 ans, non-fumeur, consulte pour une toux persistante depuis 3 semaines avec l√©g√®re dyspn√©e d'effort. Ant√©c√©dents familiaux de cancer pulmonaire. Auscultation r√©v√®le des r√¢les cr√©pitants en base droite.",
            "exam_type": "Radiographie thoracique de face et profil",
            "specialty": "Pneumologie"
        },
        {
            "title": "Mammographie - D√©pistage de Routine",
            "clinical_info": "Patiente de 52 ans en suivi post-th√©rapeutique pour cancer du sein gauche trait√© il y a 2 ans par tumorectomie et radioth√©rapie. Contr√¥le de routine dans le cadre de la surveillance oncologique. Aucun signe clinique suspect √† l'examen.",
            "exam_type": "Mammographie bilat√©rale avec tomosynth√®se",
            "specialty": "S√©nologie"
        },
        {
            "title": "Radiographie Osseuse - Traumatisme",
            "clinical_info": "Patient de 35 ans, ouvrier du b√¢timent, chute d'√©chafaudage il y a 2 heures. Douleur intense poignet droit, impotence fonctionnelle totale, d√©formation visible. Pas de troubles vasculo-nerveux distaux. Recherche de fracture.",
            "exam_type": "Radiographie poignet droit face et profil",
            "specialty": "Orthop√©die"
        },
        {
            "title": "Radiographie Cervicale - N√©vralgie",
            "clinical_info": "Patient de 53 ans, fumeur, adress√© pour majoration d'une n√©vralgie cervicobrachiale C8-T1. Pr√©sente une douleur du membre sup√©rieur gauche et une l√©g√®re atrophie musculaire de l'√©paule. Paresth√©sies dans le territoire cubital.",
            "exam_type": "Radiographie rachis cervical face et profil",
            "specialty": "Neurologie"
        },
        {
            "title": "Radiographie Abdominale - Douleurs Abdominales",
            "clinical_info": "Patiente de 67 ans, diab√©tique, pr√©sente depuis 48h des douleurs abdominales diffuses avec arr√™t des mati√®res et des gaz. Vomissements bilieux. Abdomen distendu, tympanique. Suspicion d'occlusion intestinale.",
            "exam_type": "Radiographie abdomen sans pr√©paration debout et couch√©",
            "specialty": "Gastroent√©rologie"
        }
    ]
    
    return examples


def get_supported_formats() -> List[str]:
    """
    Retourne la liste des formats d'image support√©s
    
    Returns:
        Liste des extensions de fichiers support√©es
    """
    return ['.jpg', '.jpeg', '.png', '.tiff', '.tif', '.bmp', '.dcm', '.dicom']


def get_max_file_size() -> int:
    """
    Retourne la taille maximale de fichier support√©e en bytes
    
    Returns:
        Taille max en bytes (10 MB par d√©faut)
    """
    return 10 * 1024 * 1024  # 10 MB
